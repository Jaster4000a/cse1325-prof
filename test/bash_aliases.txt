# This file REPLACES .bash_aliases in the provide VM's home directory

# Quick switch to shared folders for development
# If you share other folders, copy and edit this line
alias dev='cd /media/sf_Documents'

# #############
# Edit commands

# The EDITOR environment sets the default text editor for most text files
# Change this to your favorite editor, e.g., nano, vim, emacs, leafpad
export EDITOR=gedit

# Open file(s) using the associated application, creating the file if it doesn't exist
e() {
 for file in "$@" ; do
    if [ ! -f "$file" ]; then
      touch "$file"
    fi
    xdg-open "$file"
  done
}

# Open the header and body of a C++ class
ec () {
  e $1.h $1.cpp
}

# Open all C++ class files (header then body) in alphabetical order, followed by Makefile
alias eall='shopt -s nullglob ; setsid gedit $(ls -1 *.h *.cpp | sort -t. -k1,1 -k2,2r) Makefile* makefile* ; shopt -u nullglob'

# ###########
# Git aliases

# Colorful, concise git log
alias gitl="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

# #########
# EXA setup
alias lx='exa -lh --git --time-style iso'
alias lt='exa -lhT --level 3 --git --time-style iso'
export EXA_COLORS="da=1;34"

# ######################
# Miscellaneous commands

# Type 'backup' to duplicate current directory to time-stamped peer directory
alias backup='DIR=../$(basename $PWD)-$(date +%Y%m%d-%H%M%S);mkdir -p $DIR;cp -ru . $DIR'

# enable mkcd to create and change to a new path
mkcd () {
  case "$1" in /*) :;; *) set -- "./$1";; esac
  mkdir -p "$1" && cd "$1"
}

# easier-to-read path command
paths() {
  echo $PATH | sed 's/:/\n/g'
}

# search hierarchy of PDF files
pdfgreps() {
  find . -iname '*.pdf' -exec pdfgrep $1 {} +
}

# ######################
# C++ build enhancements
#

# build divider
div() {
  echo -e "      Starting a Build\n" $(date) | boxes -p h4v2 -d ian_jones | lolcat
}

# notification e.g., that build is complete
notify() {
  result=$?
  notify-send -i $([ "$result" = 0 ] && echo info || echo error) "$@"
  (echo $([ "$result" = 0 ] && echo "success:" || echo "failed: ") "$@" | espeak &) > /dev/null 2>&1
  return $result
}

# enhanced make command
m() {
  div
  make "$@"
  notify build complete
}

# roughly calculate changes from a previous iteration
cloc-delta() {
  for f in *.h *.cpp Makefile ; do diff $f $1; done | grep '<' | wc
}
